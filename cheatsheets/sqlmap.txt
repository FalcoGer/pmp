sqlmap

sql injection checking
https://github.com/sqlmapproject/sqlmap/wiki/Usage

get a web request and save it
use it with the -r option

sqlmap -r request.txt

======================================

--all           enumerate everything
--update        update the program
--beep          Beep on question and/or when SQL injection is found
--alert=ALERT   run commands on attacker machine when injection is found
--answers=ANSWERS
                Set question answers (e.g. "quit=N,follow=N")
--sqlmap-shell  Prompt for an interactive sqlmap shell
--wizard        Simple wizard interface for beginner users

======================================
Logging:

-s SESSIONFILE  Load session from a stored (.sqlite) file
-t TRAFFICFILE  Log all HTTP traffic into a textual file

======================================
meta:

--banner        DBMS banner
--current-user  DB user
--current-db    current database
--hostname      hostname

======================================
database user information:

--users         users
--passwords     database user hashes
--privileges    user privs
--roles         user roles

======================================
data:

--dbs           databases
--tables        tables
--columns       enumerate columns
--schema        show schemas
--count         number of entries in tables

--dump          dump all data
--dump-all      dump all data in all databases
--comments      retrieve comments

======================================
Filters:

-D <db-name>    On this database
-T <table-name> on those table(s)
-C <cols>       on those clumn(s)
-X <cols>       exclude those columns
-U <user>       user to enumerate
--exclude-sysdbs
                exclude system databases
--where=DUMPWHERE
                Use WHERE condition while table dumping

======================================
Misc:

--sql-query=QUERY
                execute query
--sql-shell     interactive shell
--sql-file=SQLFILE
                run commands from this file

======================================
Backend OS access:

--file-read=RFILE
--file-write=WFILE
--file-dest=DFILE
                Read/Write to RBMS Backend file system
--os-cmd=OSCMD  run command on RBMS Backend OS
--os-shell      interactive shell for RBMS backend os
--os-pwn        Prompt for an OOB shell, Meterpreter or VNC
--msf-path=MSFPATH
                define msfpath
--tmp-path=TMPPATH
                Remote absolute path of temporary files directory


--reg-read      Read a Windows registry key value
--reg-add       Write a Windows registry key value data
--reg-del       Delete a Windows registry key value
--reg-key=REGKEY
                Windows registry key
--reg-value=REGVAL
                Windows registry key value
--reg-data=REGDATA
                Windows registry key value data
--reg-type=REGTYPE
                Windows registry key value type


======================================
Brute:

--common-tables
                Check for common tables
--common-columns
                Check for common columns

