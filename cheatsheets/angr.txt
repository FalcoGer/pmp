Angr is a python module to do binary analysis and find specific execution paths and solve for inputs that lead to those paths.
Angr is best used in an interpreter console but can be used with a traditional executable python script.

References:
https://github.com/angr/angr-doc
https://github.com/angr/angr-doc/blob/master/CHEATSHEET.md


Imports:

import angr
import claripy


Open Project.
Not loading libraries may result in faster times, but may also lead to problems later.
One can set a base address to make the addresses match your favorite disassembler/debugger.
Only the executable path is required here.

binary = 'crackme8'
p = angr.Project(binary, main_opts={'custom_base_addr': 0x400000}, auto_load_libs=False)


Create a bitvector
The bitvector is any input, command line argument or memory content that we want to solve to get to specific execution paths.
This is called a "symbolized variable" in angr.
It is best if you know the length of the vector, but you can oversize it and fill it with 0x00 if it's an input string, for example.
Because the vector is a bitvector, we need to multiply with 8 if we want bytes.

argv1 = claripy.BVS("argv1", 100*8)
stdin = claripy.BVS("stdin", 20*8)
stdin = stdin.Concat(clariphy.BVS('\n', 8)) # add new line to stdin for program to accept it.


Work with bitvectors:
Bitvectors can be concrete (specific values) or dynamic.
They can be concatenated, written to memory or have constraints added to them.


States:
A state is an execution flow.
You can start execution from the beginning by generating an initial state, or you can generate a state from a memory address.

state = p.factory.entry_state()
state = p.factory.blank_state(0x0400296)
state = p.factory.entry_state(
    args=[p.filename, argv1],
    add_options=angr.options.unicorn, # good performance engine, seems to give good inputs without too much garbage at the end.
    stdin = stdin
)


Constraints:
A constraint restricts what a bit in a bitvector is allowed to be.
It reduces the searchspace (faster) and rejects undesired solutions that might work but are not the ones you're looking for,
for example buffer overflows that trigger a function call that you were looking for but you wanted a normal execution.

idx = 0
for ch in argv1.chop(8):
    if idx == 0:
        state.solver.add(ch == b'-') # concrete value, determined from static analysis RE
    else:
        is_num = state.solver.And(ch >= b"0", ch <= b"9")
        is_alpha_lower = state.solver.And(ch >= b"a", ch <= b"z")
        is_alpha_upper = state.solver.And(ch >= b"A", ch <= b"Z")
        is_zero = state.solver.And(ch == b"\x00") # needed to allow sizes shorter than the full 100 bytes of the vector.
        constraint = state.solver.Or(
                is_num,
                is_zero,
                is_alpha_lower,
                is_alpha_upper
            )
        state.solver.add(constraint)
    idx += 1


The Simulation Manager:
The simulation manager produces states during execution every time the program branches.

sm = p.factory.simulation_manager(st)

You can use it to explore the application and find states that you want.

sm.explore(find=0x08048502, avoid=[0x080484b3, 0x080484eb])
sm.explore(find = lambda s: b"Congrats" in state.posix.dumps(1))

After exploration you will get states in different buckets, such as avoid, found, deadended (execution terminated) and active.
You can move states from one bucket into another.

sm.stash(from_stash="found", to_stash="active")
sm.drop(stash="avoid")
sm.drop(stash="deadended")

You can evaluate your symbolic variables after you have found what you were looking for.

solution = found.solver.eval(argv1, cast_to=bytes)
solution = solution[:solution.find(b'\x00')]
print(f"solution:\n{repr(solution)}")

solution = found.posix.dumps(0)
print(f"solution:\n{repr(solution)}")

You can evaluate the program's output with .posix.dumps(1)

More can be found in the angr-doc repository.
