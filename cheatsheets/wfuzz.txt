wfuzz

webfuzzer for
- content discovery (directories and subdomains)
- brute forcing (no throtteling, unlike burpsuite)

-u <url>            url to send the request to
-w <file>           wordlist file, multiple times to set FUZZ, FUZ1Z, FUZ2Z, ...
-z <payload>        type,parameter,encoder - use multiple times to set FUZZ, FUZ1Z, FUZ2Z, ...
                    examples:
                    -z file,users.txt,urlencode -z file,pass.txt,urlencode --sc 200 http://www.site.com/log.asp?user=FUZZ&pass=FUZ2Z
                    -z range,1-10

-c 					output with color
-p <addr>:<port>	proxy
-t <num>			concurrent connections
-s <time>           time between connections

-b <cookie>         cookie to go along with the request, multiple times for multiple cookies

===================================
filtering

--hc/hl/hw/hh N[,N]+
                    Hide responses with the specified code/lines/words/chars (Use BBB for taking values from baseline)

--sc/sl/sw/sh N[,N]+
                    Show responses with the specified code/lines/words/chars (Use BBB for taking values from baseline)

--ss/hs <regex>     Show/Hide responses with the specified regex within the content
--filter <filter>   Filter  responses using the specified expression (Use BBB for taking values from baseline) It should be
                    composed of: c,l,w,h/and,or/=,<,>,!=,<=,>= Keyword: FUZZ, ..., FUZnZ  wherever you put  these  keywords
                    wfuzz  will replace them with the values of the specified payload.  Baseline: FUZZ{baseline_value} FUZZ
                    will be replaced by baseline_value. It will be the first request performed and could be used as a  base
                    for filtering.

===================================
brute force directories/subdomains

specify "FUZZ" in url
                    -w directory.lst -w subdomain.lst -u 'http://FUZ2Z.example.com/FUZZ'

-R <depth>          maximum recursive depth
-L                  follow redirects

===================================
fuzzing

-d <postdata>       request to fuzz
                    example: "id=FUZZ&catalogue=1"
-H <header>         header, repeat for multiple headers
                    example: "Host:www.mysite.com,Cookie:id=1312321&user=FUZZ"
--basic/ntlm/digest <auth>
                    in format "user:pass" or "FUZZ:FUZZ" or "domain\FUZ2Z:FUZZ"



wfuzz -e encoders
use with -z

Available encoders:

  Category      | Name              | Summary                                                                           
------------------------------------------------------------------------------------------------------------------------
  hashes        | base64            | Encodes the given string using base64                                             
  url           | doble_nibble_hex  | Replaces ALL characters in string using the %%dd%dd escape                        
  url_safe, url | double urlencode  | Applies a double encode to special characters in string using the %25xx escape.   
                |                   | Letters, digits, and the characters '_.-' are never quoted.                       
  url           | first_nibble_hex  | Replaces ALL characters in string using the %%dd? escape                          
  default       | hexlify           | Every byte of data is converted into the corresponding 2-digit hex representatio  
                |                   | n.                                                                                
  html          | html_decimal      | Replaces ALL characters in string using the &#dd; escape                          
  html          | html_escape       | Convert the characters &<>" in string to HTML-safe sequences.                     
  html          | html_hexadecimal  | Replaces ALL characters in string using the &#xx; escape                          
  hashes        | md5               | Applies a md5 hash to the given string                                            
  db            | mssql_char        | Converts ALL characters to MsSQL's char(xx)                                       
  db            | mysql_char        | Converts ALL characters to MySQL's char(xx)                                       
  default       | none              | Returns string without changes                                                    
  db            | oracle_char       | Converts ALL characters to Oracle's chr(xx)                                       
  default       | random_upper      | Replaces random characters in string with its capitals letters                    
  url           | second_nibble_hex | Replaces ALL characters in string using the %?%dd escape                          
  hashes        | sha1              | Applies a sha1 hash to the given string                                           
  url           | uri_double_hex    | Encodes ALL charachers using the %25xx escape.                                    
  url           | uri_hex           | Encodes ALL charachers using the %xx escape.                                      
  url           | uri_triple_hex    | Encodes ALL charachers using the %25%xx%xx escape.                                
  url           | uri_unicode       | Replaces ALL characters in string using the %u00xx escape                         
  url_safe, url | urlencode         | Replace special characters in string using the %xx escape. Letters, digits, and   
                |                   | the characters '_.-' are never quoted.                                            
  url           | utf8              | Replaces ALL characters in string using the \u00xx escape                         
  url           | utf8_binary       | Replaces ALL characters in string using the \uxx escape




wfuzz -e scripts

Available scripts:

  Category                      | Name          | Summary                                              
-------------------------------------------------------------------------------------------------------
  default, passive              | listing       | Looks for directory listing vulnerabilities          
  re-enqueue, active, discovery | backups       | Looks for known backup filenames.                    
  default, active, discovery    | robots        | Parses robots.txt looking for new content.           
  default, active, discovery    | svn_extractor | Parses .svn/entries file.                            
  default, passive              | errors        | Looks for error messages                             
  verbose, passive              | cookies       | Looks for new cookies                                
  verbose, passive              | headers       | Looks for server headers                             
  tools, active                 | screenshot    | Performs a screen capture using linux cutycapt tool  
  default, active, discovery    | cvs_extractor | Parses CVS/Entries file.                             
  active, discovery             | links         | Parses HTML looking for new content.                 
  default, active, discovery    | wc_extractor  | Parses subversion's wc.db file.                      
  verbose, passive              | title         | Parses HTML page title                               
  default, active, discovery    | sitemap       | Parses sitemap.xml file                              
  tools                         | grep          | HTTP response grep 



wfuzz -e payloads
user with -z

Available payloads:

  Name            | Summary                                                                           
------------------------------------------------------------------------------------------------------
  buffer_overflow | Returns a string using the following pattern A * given number.                    
  file            | Returns each word from a file.                                                    
  list            | Returns each element of the given word list separated by -.                       
  hexrange        | Returns each hex number of the given hex range.                                   
  ipnet           | Returns list of IP addresses of a network.                                        
  iprange         | Returns list of IP addresses of a given IP range.                                 
  permutation     | Returns permutations of the given charset and length.                             
  guitab          | This payload reads requests from a tab in the GUI                                 
  burplog         | Returns fuzz results from a Burp log.                                             
  burpitem        | This payload loads request/response from items saved from Burpsuite.              
  wfuzzp          | Returns fuzz results' URL from a previous stored wfuzz session.                   
  hexrand         | Returns random hex numbers from the given range.                                  
  range           | Returns each number of the given range.                                           
  dirwalk         | Returns filename's recursively from a local directory.                            
  names           | Returns possible usernames by mixing the given words, separated by -, using know  
                  | n typical constructions.                                                          
  bing            | Returns URL results of a given bing API search (needs api key).                   
  shodanp         | Returns URLs of a given Shodan API search (needs api key).                        
  autorize        | Returns fuzz results' from autorize.                                              
  burpstate       | Returns fuzz results from a Burp state.                                           
  stdin           | Returns each item read from stdin.