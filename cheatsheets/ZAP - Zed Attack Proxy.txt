ZAP - Zed Attack Proxy
By OWASP

FOSS alternative to BurpSuite

================================

Run
$ zap.sh

================================

https://www.youtube.com/watch?v=CxjHGWk4BCs&list=PLEBitBW-Hlsv8cEIUntAO8st2UGhmrjUB&index=19


Usage

ZAP uses sqlite3 database. Use Persistence on startup to make it permanent
Saving it later can take a long time. (but works)

All tables have a button on the right of the header to allow changing columns

To the left is the site tree
On the bottom is the data output
    On the right of the toolbar is the options button that will open the options page for that particular module
In the top right is the working area

Start and run integrated browser or use proxy (options, client certificate, export, import in browser)
http-proxy - localhost:8080

Create a new context for every web application that is to be tested
Set them in scope as you test them

Sitemap:
    Target button in top left shows only urls in target
    RMB can add to context easily
    context RMB can add or remove from scope easily

    Nodes are ZAP's understanding of the application
    Each node is representive of a functionality of the application
    Nodes should not represent data in the application

    For example a GET request with a search query in the URL is 1 (ONE) functionality of the application
    
    By default only the keys of post and get url query strings are used
    If they are not structured in the default way (& seperators, key=val), we need to tell zap with options
        Context - Structure - seperators (each one is evaluated separately)

    Nodes are determined by
        METHOD /path/to/Site.html (header_parma, header_parmb, ...) (body_parama, ...)
    where every parameter permutation (present, or not) is different
    parameter values are not important
    url parameters are treated differently from POST parameters in the body

    Sometimes nodes should be determined by a parameter value
        http://example.com/index.php?page=home
        http://example.com/index.php?page=search&q=some%20string
        etc...

        structual modifiers can be added to the context cope with that case
        you need a structural parameter "page"

    Sometimes sites are data driven, meaning that the url is reflecting a database of some kind
        http://plugin.store/plugins/someplugin_A/about.html
        http://plugin.store/plugins/someplugin_A/details.html
        http://plugin.store/plugins/someplugin_B/about.html
        http://plugin.store/plugins/someplugin_B/details.html
        http://plugin.store/plugins/someplugin_C/about.html
        http://plugin.store/plugins/someplugin_C/details.html
        ...
        with potentially millions of sites
        but about.html and details.html is the same code all over just with different content from the database
        scanning all of those would be a waste of time, mulitplying effort for no reason at all
        it also needlessly blows up your site tree

        structual modifiers can be added to the context cope with that case
        you need a data driven node "http://plugin.store/(plugins/)(.+?)(/.*)"
        -> right click one of the nodes that is data driven -> flag as context -> data drive node


Auto replace in requests, rexgex (ex. user agent):
    Options - Replacer

Fuzz requests:
    Get request - mark fuzzing location - RMB - Fuzz...
    Open Fuzzer pannel - New Fuzz - Add locations

    Filter requests results:
        Go to search
        HTTP Fuzz results
        Search criteria (also only scope button)

Spidering:
    WILL SUBMIT FORM REQUEST -> BEWARE EMAIL SPAM POTENTIAL
    Use Protected mode to target SCOPE ONLY
    Setup Globally excluded URLs in options

    Will taverse the website and follow all links and submit all forms
    Form Handler plugin can be used to alter what defaults are used when submitting forms

    Ajax Spider will launch a browser, fill forms and click buttons and input fields to crawl javascript based web applications

Forced Browse:
    Another option to find stuff.
    It's basically dirbuster...


API:
    API requests can be run against daemon and desktop mode ZAP
    API can be found in http://localhost:8080/
    just curl the relevant requests to run actions or request info from the API