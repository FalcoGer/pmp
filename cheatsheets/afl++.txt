use as environment variable
    CC=afl-gcc/afl-clang/afl-clang-fast
    CXX=afl-g++/afl-clang/afl-clang-fast++
    AFL_INST_RATIO=0..100 (instrumentation ratio)
    AFL_HARDEN=1 (adds code hardening (-D_FORTIFY_SOURCE=2 -fstack-protector-all))
    AFL_PRELOAD=/usr/lib/afl/libdislocator.so replaces libc allocator (malloc) to handle memory violations (canaries, marking freed memory as invalid, etc)
then compile with make to compile with instrumentation built in.
find test corpus: unit tests/integration tests/examples/
possibly use dictionary
    sample ones on the repo: https://github.com/AFLplusplus/AFLplusplus/tree/stable/dictionaries
minimize list of cases
    afl-cmin -i <infolder> -o <outfolder> -- binary <arguments> [@@]
minimize each test file
    afl-tmin -i <test case file> -o <minimized file> -- binary <arguments> [@@]
run fuzzing
    afl-fuzz -i <test cases> -o <output dir> [other options] -- <binary> <arguments> [@@]
        -M <master name>
        -S <slave name>
        -m <max memory usage (MB)>
        -t <timeout for each run (ms)>
        -n      fuzz without instrumentation (dumb mode)
        -x <dictionary>
if using multiple, figure out how many cpus you can use
    afl-gotcpu
if using multiple, get summary from all with
    afl-whatsup <output dir>


if source code is not available:
use retrowrite
https://github.com/HexHive/retrowrite

allows statically rewriting binaries (ie before execution) to add instrumentation.
binary
    must be compiled as position independent code (PIC/PIE)
    must be x86_64 (32 bit at your own risk)
    must contain symbols (i.e., not stripped; if stripped, please recover symbols first)
    must not contain C++ exceptions (i.e., C++ exception tables are not recovered and simply stripped during lifting)

retrowrite [--asan] </path/to/binary> <path/to/output/asm/files>
AFL_AS_FORCE_INSTRUMENT=1 afl-gcc foo.s -o foo